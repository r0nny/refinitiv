type User {
  userId: ID!
  name: String
  reviews: [Review] @relation(name: "WROTE", direction: OUT)
  avgStars: Float
    @cypher(
      statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN toFloat(avg(r.stars))"
    )
  numReviews: Int
    @cypher(statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN COUNT(r)")
  recommendations(first: Int = 3): [Business]
    @cypher(
      statement: "MATCH (this)-[:WROTE]->(r:Review)-[:REVIEWS]->(:Business)<-[:REVIEWS]-(:Review)<-[:WROTE]-(:User)-[:WROTE]->(:Review)-[:REVIEWS]->(rec:Business) WHERE NOT EXISTS( (this)-[:WROTE]->(:Review)-[:REVIEWS]->(rec) ) WITH rec, COUNT(*) AS num ORDER BY num DESC LIMIT $first RETURN rec"
    )
}

type Business {
  businessId: ID!
  name: String!
  address: String
  city: String
  state: String
  location: Point
  avgStars: Float
    @cypher(
      statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)"
    )
  reviews: [Review] @relation(name: "REVIEWS", direction: IN)
  categories: [Category] @relation(name: "IN_CATEGORY", direction: OUT)
}

type Review {
  reviewId: ID!
  stars: Float
  text: String
  date: Date
  business: Business @relation(name: "REVIEWS", direction: OUT)
  user: User @relation(name: "WROTE", direction: IN)
}

type Category {
  name: ID!
  businesses: [Business] @relation(name: "IN_CATEGORY", direction: IN)
}

type RatingCount {
  stars: Float!
  count: Int!
}

interface Basic {
  node_id: ID!
  name: String!
  sourceID: String
  valid_until: String
}

type Address implements Basic {
  node_id: ID!
  name: String!
  address: String!
  country_codes: String
  countries: String
  sourceID: String
  valid_until: String
}

type Entity implements Basic {
  node_id: ID!
  name: String!
  country_codes: String
  countries: String
  jurisdiction: String
  jurisdiction_description: String
  ibcRUC: String
  incorporation_date: String
  service_provider: String
  sourceID: String
  valid_until: String
  registered_address: [Address]
    @cypher(
      statement: "MATCH (this)-[:registered_address]->(a:Address) RETURN a"
    )
}

type Other implements Basic {
  node_id: ID!
  name: String!
  sourceID: String
  valid_until: String
  connected_to: [Entity]
    @cypher(statement: "MATCH (this)-[:connected_to]->(e:Entity) RETURN e")
}

type Intermediary implements Basic {
  node_id: ID!
  name: String!
  sourceID: String
  valid_until: String
  officer_of: [Entity]
    @cypher(statement: "MATCH (this)-[r:officer_of]->(e:Entity) RETURN e")
  intermediary_of: [Entity]
    @cypher(statement: "MATCH (this)-[r:intermediary_of]->(e:Entity) RETURN e")
  registered_address: [Address]
    @cypher(
      statement: "MATCH (this)-[:registered_address]->(a:Address) RETURN a"
    )
}

union Company = Entity | Intermediary

type Officer {
  node_id: ID!
  name: String!
  country_codes: String
  countries: String
  sourceID: String
  valid_until: String
  registered_address: [Address]
    @cypher(
      statement: "MATCH (this)-[r:registered_address]->(a:Address) RETURN a"
    )
  officer_of: [Company]
    @cypher(statement: "MATCH (this)-[r:officer_of]->(e) RETURN e")
}

type RatingData {
  name: String!
  count: Int!
}

type Mutation {
  mergeBusinessCategory(categories: [String!]!, businessId: ID!): Business
    @cypher(
      statement: "MATCH (b:Business {businessId: $businessId}) UNWIND $categories AS cat MERGE (c:Category {name: cat}) MERGE (b)-[:IN_CATEGORY]->(c) RETURN b"
    )
}

type Query {
  userCount: Int! @cypher(statement: "MATCH (u:User) RETURN COUNT(u)")
  ratingsCount: [RatingCount]
    @cypher(
      statement: "MATCH (r:Review) WITH r.stars AS stars, COUNT(*) AS count ORDER BY stars RETURN {stars: stars, count: count}"
    )

  popularJurisdiction: [RatingData]
    @cypher(
      statement: "MATCH (e:Entity) WITH e.jurisdiction_description AS name, count(*) AS count ORDER BY count DESC RETURN {name: name, count: count}"
    )
  popularCountries: [RatingData]
    @cypher(
      statement: "MATCH (e:Entity) WITH e.country_codes AS name,e.countries AS desc, count(*) AS count ORDER BY count DESC RETURN {name: desc, count: count}"
    )
  popularOfficers: [RatingData]
    @cypher(
      statement: "MATCH (o:Officer)-[:officer_of]-(e:Entity) WITH o.name as name, count(*) as count ORDER BY count DESC RETURN {name: name, count: count}"
    )
  activeIntermediaryCompanies: [Intermediary]
    @cypher(
      statement: "MATCH (i:Intermediary)-[r:intermediary_of]->(e:Entity) RETURN i"
    )
  activeOfficerCompanies: [Intermediary]
    @cypher(
      statement: "MATCH (i:Intermediary)-[r:officer_of]->(e:Entity) RETURN i"
    )
  bothOfficerAndIntermediary: [Intermediary]
    @cypher(
      statement: "MATCH (i:Intermediary)-[r:intermediary_of]->(e:Entity) RETURN i UNION MATCH (i2:Intermediary)-[r2:officer_of]->(e2:Entity) RETURN i2"
    )
}
